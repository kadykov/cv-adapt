/**
 * This file is AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 * Feel free to commit/edit it as you need.
 */
/* eslint-disable */
/* tslint:disable */
import { HttpResponse, http } from "msw";
import { faker } from "@faker-js/faker";

faker.seed(1);

const baseURL = "";
const MAX_ARRAY_LENGTH = 3;

let i = 0;
const next = () => {
  if (i === Number.MAX_SAFE_INTEGER - 1) {
    i = 0;
  }
  return i++;
};

export const handlers = [
  http.post(`${baseURL}/v1/api/auth/register`, async () => {
    const resultArray = [
      [await getRegisterV1ApiAuthRegisterPost200Response(), { status: 200 }],
      [await getRegisterV1ApiAuthRegisterPost400Response(), { status: 400 }],
      [await getRegisterV1ApiAuthRegisterPost422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/v1/api/auth/login`, async () => {
    const resultArray = [
      [await getLoginV1ApiAuthLoginPost200Response(), { status: 200 }],
      [await getLoginV1ApiAuthLoginPost422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/v1/api/auth/logout`, async () => {
    const resultArray = [
      [await getLogoutV1ApiAuthLogoutPost200Response(), { status: 200 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/v1/api/auth/refresh`, async () => {
    const resultArray = [
      [await getRefreshTokenV1ApiAuthRefreshPost200Response(), { status: 200 }],
      [await getRefreshTokenV1ApiAuthRefreshPost422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/v1/api/users/me`, async () => {
    const resultArray = [
      [await getGetUserProfileV1ApiUsersMeGet200Response(), { status: 200 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/v1/api/users/me`, async () => {
    const resultArray = [
      [await getUpdateUserProfileV1ApiUsersMePut200Response(), { status: 200 }],
      [await getUpdateUserProfileV1ApiUsersMePut422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/v1/api/user/detailed-cvs`, async () => {
    const resultArray = [
      [
        await getGetUserDetailedCvsV1ApiUserDetailedCvsGet200Response(),
        { status: 200 },
      ],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/v1/api/user/detailed-cvs/:languageCode`, async () => {
    const resultArray = [
      [
        await getGetUserDetailedCvV1ApiUserDetailedCvsLanguageCodeGet200Response(),
        { status: 200 },
      ],
      [
        await getGetUserDetailedCvV1ApiUserDetailedCvsLanguageCodeGet422Response(),
        { status: 422 },
      ],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/v1/api/user/detailed-cvs/:languageCode`, async () => {
    const resultArray = [
      [
        await getUpsertUserDetailedCvV1ApiUserDetailedCvsLanguageCodePut200Response(),
        { status: 200 },
      ],
      [
        await getUpsertUserDetailedCvV1ApiUserDetailedCvsLanguageCodePut422Response(),
        { status: 422 },
      ],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/v1/api/user/detailed-cvs/:languageCode`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [
        await getDeleteUserDetailedCvV1ApiUserDetailedCvsLanguageCodeDelete422Response(),
        { status: 422 },
      ],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(
    `${baseURL}/v1/api/user/detailed-cvs/:languageCode/primary`,
    async () => {
      const resultArray = [
        [
          await getSetPrimaryCvV1ApiUserDetailedCvsLanguageCodePrimaryPut200Response(),
          { status: 200 },
        ],
        [
          await getSetPrimaryCvV1ApiUserDetailedCvsLanguageCodePrimaryPut422Response(),
          { status: 422 },
        ],
      ];

      return HttpResponse.json(...resultArray[next() % resultArray.length]);
    },
  ),
  http.get(`${baseURL}/v1/api/jobs`, async () => {
    const resultArray = [
      [await getGetJobsV1ApiJobsGet200Response(), { status: 200 }],
      [await getGetJobsV1ApiJobsGet401Response(), { status: 401 }],
      [await getGetJobsV1ApiJobsGet422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/v1/api/jobs`, async () => {
    const resultArray = [
      [await getCreateJobV1ApiJobsPost200Response(), { status: 200 }],
      [await getCreateJobV1ApiJobsPost401Response(), { status: 401 }],
      [await getCreateJobV1ApiJobsPost422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/v1/api/jobs/:jobId`, async () => {
    const resultArray = [
      [await getGetJobV1ApiJobsJobIdGet200Response(), { status: 200 }],
      [await getGetJobV1ApiJobsJobIdGet401Response(), { status: 401 }],
      [await getGetJobV1ApiJobsJobIdGet404Response(), { status: 404 }],
      [await getGetJobV1ApiJobsJobIdGet422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.put(`${baseURL}/v1/api/jobs/:jobId`, async () => {
    const resultArray = [
      [await getUpdateJobV1ApiJobsJobIdPut200Response(), { status: 200 }],
      [await getUpdateJobV1ApiJobsJobIdPut401Response(), { status: 401 }],
      [await getUpdateJobV1ApiJobsJobIdPut404Response(), { status: 404 }],
      [await getUpdateJobV1ApiJobsJobIdPut422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.delete(`${baseURL}/v1/api/jobs/:jobId`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [await getDeleteJobV1ApiJobsJobIdDelete401Response(), { status: 401 }],
      [await getDeleteJobV1ApiJobsJobIdDelete404Response(), { status: 404 }],
      [await getDeleteJobV1ApiJobsJobIdDelete422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/v1/api/generations/competences`, async () => {
    const resultArray = [
      [
        await getGenerateCompetencesV1ApiGenerationsCompetencesPost200Response(),
        { status: 200 },
      ],
      [
        await getGenerateCompetencesV1ApiGenerationsCompetencesPost422Response(),
        { status: 422 },
      ],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/v1/api/generations/cv`, async () => {
    const resultArray = [
      [await getGenerateCvV1ApiGenerationsCvPost200Response(), { status: 200 }],
      [await getGenerateCvV1ApiGenerationsCvPost422Response(), { status: 422 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/v1/api/generations`, async () => {
    const resultArray = [
      [
        await getGetUserGenerationsV1ApiGenerationsGet200Response(),
        { status: 200 },
      ],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.post(`${baseURL}/v1/api/generations`, async () => {
    const resultArray = [
      [
        await getGenerateAndSaveCvV1ApiGenerationsPost200Response(),
        { status: 200 },
      ],
      [
        await getGenerateAndSaveCvV1ApiGenerationsPost422Response(),
        { status: 422 },
      ],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/v1/api/generations/:cvId`, async () => {
    const resultArray = [
      [
        await getGetGeneratedCvV1ApiGenerationsCvIdGet200Response(),
        { status: 200 },
      ],
      [
        await getGetGeneratedCvV1ApiGenerationsCvIdGet422Response(),
        { status: 422 },
      ],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
];

export function getRegisterV1ApiAuthRegisterPost200Response() {
  return {
    access_token: faker.lorem.words(),
    refresh_token: faker.lorem.words(),
    token_type: faker.lorem.words(),
    user: {
      email: faker.internet.email(),
      id: faker.number.int(),
      created_at: faker.date.past(),
      personal_info: faker.helpers.arrayElement([{}, null]),
    },
  };
}

export function getRegisterV1ApiAuthRegisterPost400Response() {
  return null;
}

export function getRegisterV1ApiAuthRegisterPost422Response() {
  return {
    detail: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      loc: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) =>
        faker.helpers.arrayElement([faker.lorem.words(), faker.number.int()]),
      ),
      msg: faker.lorem.words(),
      type: faker.lorem.words(),
    })),
  };
}

export function getLoginV1ApiAuthLoginPost200Response() {
  return {
    access_token: faker.lorem.words(),
    refresh_token: faker.lorem.words(),
    token_type: faker.lorem.words(),
    user: {
      email: faker.internet.email(),
      id: faker.number.int(),
      created_at: faker.date.past(),
      personal_info: faker.helpers.arrayElement([{}, null]),
    },
  };
}

export function getLoginV1ApiAuthLoginPost422Response() {
  return {
    detail: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      loc: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) =>
        faker.helpers.arrayElement([faker.lorem.words(), faker.number.int()]),
      ),
      msg: faker.lorem.words(),
      type: faker.lorem.words(),
    })),
  };
}

export function getLogoutV1ApiAuthLogoutPost200Response() {
  return [...new Array(5).keys()]
    .map((_) => ({ [faker.lorem.word()]: faker.lorem.words() }))
    .reduce((acc, next) => Object.assign(acc, next), {});
}

export function getRefreshTokenV1ApiAuthRefreshPost200Response() {
  return {
    access_token: faker.lorem.words(),
    refresh_token: faker.lorem.words(),
    token_type: faker.lorem.words(),
    user: {
      email: faker.internet.email(),
      id: faker.number.int(),
      created_at: faker.date.past(),
      personal_info: faker.helpers.arrayElement([{}, null]),
    },
  };
}

export function getRefreshTokenV1ApiAuthRefreshPost422Response() {
  return {
    detail: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      loc: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) =>
        faker.helpers.arrayElement([faker.lorem.words(), faker.number.int()]),
      ),
      msg: faker.lorem.words(),
      type: faker.lorem.words(),
    })),
  };
}

export function getGetUserProfileV1ApiUsersMeGet200Response() {
  return {
    email: faker.internet.email(),
    id: faker.number.int(),
    created_at: faker.date.past(),
    personal_info: faker.helpers.arrayElement([{}, null]),
  };
}

export function getUpdateUserProfileV1ApiUsersMePut200Response() {
  return {
    email: faker.internet.email(),
    id: faker.number.int(),
    created_at: faker.date.past(),
    personal_info: faker.helpers.arrayElement([{}, null]),
  };
}

export function getUpdateUserProfileV1ApiUsersMePut422Response() {
  return {
    detail: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      loc: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) =>
        faker.helpers.arrayElement([faker.lorem.words(), faker.number.int()]),
      ),
      msg: faker.lorem.words(),
      type: faker.lorem.words(),
    })),
  };
}

export function getGetUserDetailedCvsV1ApiUserDetailedCvsGet200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    created_at: faker.date.past(),
    updated_at: faker.helpers.arrayElement([faker.date.past(), null]),
    language_code: faker.lorem.words(),
    content: {},
    is_primary: faker.datatype.boolean(),
    id: faker.number.int(),
    user_id: faker.number.int(),
  }));
}

export function getGetUserDetailedCvV1ApiUserDetailedCvsLanguageCodeGet200Response() {
  return {
    created_at: faker.date.past(),
    updated_at: faker.helpers.arrayElement([faker.date.past(), null]),
    language_code: faker.lorem.words(),
    content: {},
    is_primary: faker.datatype.boolean(),
    id: faker.number.int(),
    user_id: faker.number.int(),
  };
}

export function getGetUserDetailedCvV1ApiUserDetailedCvsLanguageCodeGet422Response() {
  return {
    detail: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      loc: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) =>
        faker.helpers.arrayElement([faker.lorem.words(), faker.number.int()]),
      ),
      msg: faker.lorem.words(),
      type: faker.lorem.words(),
    })),
  };
}

export function getUpsertUserDetailedCvV1ApiUserDetailedCvsLanguageCodePut200Response() {
  return {
    created_at: faker.date.past(),
    updated_at: faker.helpers.arrayElement([faker.date.past(), null]),
    language_code: faker.lorem.words(),
    content: {},
    is_primary: faker.datatype.boolean(),
    id: faker.number.int(),
    user_id: faker.number.int(),
  };
}

export function getUpsertUserDetailedCvV1ApiUserDetailedCvsLanguageCodePut422Response() {
  return {
    detail: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      loc: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) =>
        faker.helpers.arrayElement([faker.lorem.words(), faker.number.int()]),
      ),
      msg: faker.lorem.words(),
      type: faker.lorem.words(),
    })),
  };
}

export function getDeleteUserDetailedCvV1ApiUserDetailedCvsLanguageCodeDelete422Response() {
  return {
    detail: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      loc: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) =>
        faker.helpers.arrayElement([faker.lorem.words(), faker.number.int()]),
      ),
      msg: faker.lorem.words(),
      type: faker.lorem.words(),
    })),
  };
}

export function getSetPrimaryCvV1ApiUserDetailedCvsLanguageCodePrimaryPut200Response() {
  return {
    created_at: faker.date.past(),
    updated_at: faker.helpers.arrayElement([faker.date.past(), null]),
    language_code: faker.lorem.words(),
    content: {},
    is_primary: faker.datatype.boolean(),
    id: faker.number.int(),
    user_id: faker.number.int(),
  };
}

export function getSetPrimaryCvV1ApiUserDetailedCvsLanguageCodePrimaryPut422Response() {
  return {
    detail: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      loc: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) =>
        faker.helpers.arrayElement([faker.lorem.words(), faker.number.int()]),
      ),
      msg: faker.lorem.words(),
      type: faker.lorem.words(),
    })),
  };
}

export function getGetJobsV1ApiJobsGet200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    created_at: faker.date.past(),
    updated_at: faker.helpers.arrayElement([faker.date.past(), null]),
    title: faker.lorem.words(),
    description: faker.lorem.words(),
    language_code: faker.lorem.words(),
    id: faker.number.int(),
  }));
}

export function getGetJobsV1ApiJobsGet401Response() {
  return null;
}

export function getGetJobsV1ApiJobsGet422Response() {
  return {
    detail: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      loc: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) =>
        faker.helpers.arrayElement([faker.lorem.words(), faker.number.int()]),
      ),
      msg: faker.lorem.words(),
      type: faker.lorem.words(),
    })),
  };
}

export function getCreateJobV1ApiJobsPost200Response() {
  return {
    created_at: faker.date.past(),
    updated_at: faker.helpers.arrayElement([faker.date.past(), null]),
    title: faker.lorem.words(),
    description: faker.lorem.words(),
    language_code: faker.lorem.words(),
    id: faker.number.int(),
  };
}

export function getCreateJobV1ApiJobsPost401Response() {
  return null;
}

export function getCreateJobV1ApiJobsPost422Response() {
  return {
    detail: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      loc: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) =>
        faker.helpers.arrayElement([faker.lorem.words(), faker.number.int()]),
      ),
      msg: faker.lorem.words(),
      type: faker.lorem.words(),
    })),
  };
}

export function getGetJobV1ApiJobsJobIdGet200Response() {
  return {
    created_at: faker.date.past(),
    updated_at: faker.helpers.arrayElement([faker.date.past(), null]),
    title: faker.lorem.words(),
    description: faker.lorem.words(),
    language_code: faker.lorem.words(),
    id: faker.number.int(),
  };
}

export function getGetJobV1ApiJobsJobIdGet401Response() {
  return null;
}

export function getGetJobV1ApiJobsJobIdGet404Response() {
  return null;
}

export function getGetJobV1ApiJobsJobIdGet422Response() {
  return {
    detail: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      loc: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) =>
        faker.helpers.arrayElement([faker.lorem.words(), faker.number.int()]),
      ),
      msg: faker.lorem.words(),
      type: faker.lorem.words(),
    })),
  };
}

export function getUpdateJobV1ApiJobsJobIdPut200Response() {
  return {
    created_at: faker.date.past(),
    updated_at: faker.helpers.arrayElement([faker.date.past(), null]),
    title: faker.lorem.words(),
    description: faker.lorem.words(),
    language_code: faker.lorem.words(),
    id: faker.number.int(),
  };
}

export function getUpdateJobV1ApiJobsJobIdPut401Response() {
  return null;
}

export function getUpdateJobV1ApiJobsJobIdPut404Response() {
  return null;
}

export function getUpdateJobV1ApiJobsJobIdPut422Response() {
  return {
    detail: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      loc: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) =>
        faker.helpers.arrayElement([faker.lorem.words(), faker.number.int()]),
      ),
      msg: faker.lorem.words(),
      type: faker.lorem.words(),
    })),
  };
}

export function getDeleteJobV1ApiJobsJobIdDelete401Response() {
  return null;
}

export function getDeleteJobV1ApiJobsJobIdDelete404Response() {
  return null;
}

export function getDeleteJobV1ApiJobsJobIdDelete422Response() {
  return {
    detail: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      loc: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) =>
        faker.helpers.arrayElement([faker.lorem.words(), faker.number.int()]),
      ),
      msg: faker.lorem.words(),
      type: faker.lorem.words(),
    })),
  };
}

export function getGenerateCompetencesV1ApiGenerationsCompetencesPost200Response() {
  return [...new Array(5).keys()]
    .map((_) => ({
      [faker.lorem.word()]: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    }))
    .reduce((acc, next) => Object.assign(acc, next), {});
}

export function getGenerateCompetencesV1ApiGenerationsCompetencesPost422Response() {
  return {
    detail: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      loc: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) =>
        faker.helpers.arrayElement([faker.lorem.words(), faker.number.int()]),
      ),
      msg: faker.lorem.words(),
      type: faker.lorem.words(),
    })),
  };
}

export function getGenerateCvV1ApiGenerationsCvPost200Response() {
  return null;
}

export function getGenerateCvV1ApiGenerationsCvPost422Response() {
  return {
    detail: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      loc: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) =>
        faker.helpers.arrayElement([faker.lorem.words(), faker.number.int()]),
      ),
      msg: faker.lorem.words(),
      type: faker.lorem.words(),
    })),
  };
}

export function getGetUserGenerationsV1ApiGenerationsGet200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    language_code: faker.lorem.words(),
    content: {},
    id: faker.number.int(),
    created_at: faker.date.past(),
    user_id: faker.number.int(),
    detailed_cv_id: faker.number.int(),
    job_description_id: faker.number.int(),
  }));
}

export function getGenerateAndSaveCvV1ApiGenerationsPost200Response() {
  return {
    language_code: faker.lorem.words(),
    content: {},
    id: faker.number.int(),
    created_at: faker.date.past(),
    user_id: faker.number.int(),
    detailed_cv_id: faker.number.int(),
    job_description_id: faker.number.int(),
  };
}

export function getGenerateAndSaveCvV1ApiGenerationsPost422Response() {
  return {
    detail: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      loc: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) =>
        faker.helpers.arrayElement([faker.lorem.words(), faker.number.int()]),
      ),
      msg: faker.lorem.words(),
      type: faker.lorem.words(),
    })),
  };
}

export function getGetGeneratedCvV1ApiGenerationsCvIdGet200Response() {
  return {
    language_code: faker.lorem.words(),
    content: {},
    id: faker.number.int(),
    created_at: faker.date.past(),
    user_id: faker.number.int(),
    detailed_cv_id: faker.number.int(),
    job_description_id: faker.number.int(),
  };
}

export function getGetGeneratedCvV1ApiGenerationsCvIdGet422Response() {
  return {
    detail: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      loc: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) =>
        faker.helpers.arrayElement([faker.lorem.words(), faker.number.int()]),
      ),
      msg: faker.lorem.words(),
      type: faker.lorem.words(),
    })),
  };
}
